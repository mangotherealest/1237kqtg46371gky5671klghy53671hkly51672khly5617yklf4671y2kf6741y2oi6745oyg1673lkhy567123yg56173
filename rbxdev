-- Obstacle Course Game Script for Roblox
-- This script manages an obstacle course with multiple levels, scoring, and player progression

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerStorage = game:GetService("ServerStorage")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

-- Configuration Variables
local LEVELS = {
	{
		Name = "Beginner Hills",
		Difficulty = 1,
		TimeLimit = 60,
		Reward = 100,
		SpawnPoint = Vector3.new(0, 50, 0),
		EndPoint = Vector3.new(100, 50, 100)
	},
	{
		Name = "Jumping Platforms",
		Difficulty = 2,
		TimeLimit = 90,
		Reward = 200,
		SpawnPoint = Vector3.new(150, 50, 150),
		EndPoint = Vector3.new(250, 50, 250)
	},
	{
		Name = "Lava Maze",
		Difficulty = 3,
		TimeLimit = 120,
		Reward = 300,
		SpawnPoint = Vector3.new(300, 50, 300),
		EndPoint = Vector3.new(400, 50, 400)
	}
}

local CHECKPOINT_INTERVAL = 30 -- Time in seconds between checkpoints
local GRAVITY_MULTIPLIER = 1 -- Normal gravity
local JUMP_BOOST = 1 -- Normal jump height

-- Data Storage
local PlayerData = {}

-- Remote Events for Client-Server Communication
local UpdatePlayerUI = ReplicatedStorage:WaitForChild("UpdatePlayerUI")
local PlayerFinishedLevel = ReplicatedStorage:WaitForChild("PlayerFinishedLevel")

-- Create Remote Events if they don't exist
if not UpdatePlayerUI then
	UpdatePlayerUI = Instance.new("RemoteEvent")
	UpdatePlayerUI.Name = "UpdatePlayerUI"
	UpdatePlayerUI.Parent = ReplicatedStorage
end

if not PlayerFinishedLevel then
	PlayerFinishedLevel = Instance.new("RemoteEvent")
	PlayerFinishedLevel.Name = "PlayerFinishedLevel"
	PlayerFinishedLevel.Parent = ReplicatedStorage
end

-- Initialize Player Data
local function InitializePlayerData(player)
	PlayerData[player.UserId] = {
		CurrentLevel = 1,
		Score = 0,
		TimeRemaining = LEVELS[1].TimeLimit,
		CheckpointsReached = 0,
		HasFinished = false
	}
	UpdateClientUI(player)
end

-- Update Client UI
local function UpdateClientUI(player)
	local data = PlayerData[player.UserId]
	UpdatePlayerUI:FireClient(player, data.CurrentLevel, data.Score, data.TimeRemaining)
end

-- Setup Level Obstacles
local function SetupLevelObstacles(levelNum)
	local level = LEVELS[levelNum]
	local obstaclesFolder = Instance.new("Folder")
	obstaclesFolder.Name = level.Name .. "_Obstacles"
	obstaclesFolder.Parent = ServerStorage

	-- Create different obstacles based on level
	if level.Difficulty == 1 then
		-- Simple hills for level 1
		for i = 1, 5 do
			local hill = Instance.new("Part")
			hill.Size = Vector3.new(20, 5, 20)
			hill.Position = Vector3.new(level.SpawnPoint.X + (i * 20), level.SpawnPoint.Y - 2.5, level.SpawnPoint.Z + 10)
			hill.Anchored = true
			hill.BrickColor = BrickColor.new("Bright green")
			hill.Parent = obstaclesFolder
		end
	elseif level.Difficulty == 2 then
		-- Moving platforms for level 2
		for i = 1, 4 do
			local platform = Instance.new("Part")
			platform.Size = Vector3.new(10, 1, 10)
			platform.Position = Vector3.new(level.SpawnPoint.X + (i * 25), level.SpawnPoint.Y, level.SpawnPoint.Z + 15)
			platform.Anchored = true
			platform.BrickColor = BrickColor.new("Bright blue")
			platform.Parent = obstaclesFolder

			-- Add tweening for movement
			local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
			local tween = TweenService:Create(platform, tweenInfo, {Position = Vector3.new(platform.Position.X, platform.Position.Y + 5, platform.Position.Z)})
			tween:Play()
		end
	elseif level.Difficulty == 3 then
		-- Lava maze for level 3
		local lava = Instance.new("Part")
		lava.Size = Vector3.new(80, 1, 80)
		lava.Position = Vector3.new(level.SpawnPoint.X + 40, level.SpawnPoint.Y - 5, level.SpawnPoint.Z + 40)
		lava.Anchored = true
		lava.BrickColor = BrickColor.new("Bright red")
		lava.Parent = obstaclesFolder

		-- Add safe paths
		for i = 1, 3 do
			local path = Instance.new("Part")
			path.Size = Vector3.new(5, 1, 20)
			path.Position = Vector3.new(level.SpawnPoint.X + 20 + (i * 10), level.SpawnPoint.Y - 1, level.SpawnPoint.Z + 40)
			path.Anchored = true
			path.BrickColor = BrickColor.new("Bright yellow")
			path.Parent = obstaclesFolder
		end
	end

	return obstaclesFolder
end

-- Setup All Levels
local function SetupAllLevels()
	for i = 1, #LEVELS do
		SetupLevelObstacles(i)
	end
end

-- Load Level for Player
local function LoadLevelForPlayer(player, levelNum)
	local level = LEVELS[levelNum]
	local playerData = PlayerData[player.UserId]
	playerData.CurrentLevel = levelNum
	playerData.TimeRemaining = level.TimeLimit
	playerData.CheckpointsReached = 0
	playerData.HasFinished = false

	-- Teleport player to level start
	if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
		player.Character.HumanoidRootPart.CFrame = CFrame.new(level.SpawnPoint)
	end

	UpdateClientUI(player)
end

-- Handle Player Death
local function HandlePlayerDeath(player)
	local playerData = PlayerData[player.UserId]
	if playerData then
		playerData.TimeRemaining = math.max(0, playerData.TimeRemaining - 10) -- Penalty for death
		UpdateClientUI(player)
		wait(2) -- Small delay before respawn
		LoadLevelForPlayer(player, playerData.CurrentLevel)
	end
end

-- Timer Management
local function ManageTimer(player)
	local playerData = PlayerData[player.UserId]
	while playerData and not playerData.HasFinished and playerData.TimeRemaining > 0 do
		wait(1)
		playerData.TimeRemaining -= 1
		UpdateClientUI(player)

		-- Check if player ran out of time
		if playerData.TimeRemaining <= 0 then
			HandlePlayerDeath(player)
			break
		end

		-- Check for checkpoint bonus
		if playerData.TimeRemaining % CHECKPOINT_INTERVAL == 0 then
			playerData.CheckpointsReached += 1
			playerData.Score += 10
			UpdateClientUI(player)
		end
	end
end

-- Handle Level Completion
local function HandleLevelCompletion(player)
	local playerData = PlayerData[player.UserId]
	if not playerData.HasFinished then
		playerData.HasFinished = true
		playerData.Score += LEVELS[playerData.CurrentLevel].Reward
		UpdateClientUI(player)

		if playerData.CurrentLevel < #LEVELS then
			wait(3)
			LoadLevelForPlayer(player, playerData.CurrentLevel + 1)
			ManageTimer(player)
		else
			-- Player completed all levels
			UpdatePlayerUI:FireClient(player, 0, playerData.Score, 0, true)
		end
	end
end

-- Player Added Connection
Players.PlayerAdded:Connect(function(player)
	InitializePlayerData(player)
	LoadLevelForPlayer(player, 1)
	ManageTimer(player)

	-- Connect character death
	player.CharacterAdded:Connect(function(character)
		character.Humanoid.Died:Connect(function()
			HandlePlayerDeath(player)
		end)
	end)
end)

-- Player Removing Connection
Players.PlayerRemoving:Connect(function(player)
	PlayerData[player.UserId] = nil
end)

-- Handle Client Level Completion
PlayerFinishedLevel.OnServerEvent:Connect(function(player)
	HandleLevelCompletion(player)
end)

-- Initial Setup
SetupAllLevels()

-- Create End Zones for Each Level
for i, level in ipairs(LEVELS) do
	local endZone = Instance.new("Part")
	endZone.Size = Vector3.new(10, 1, 10)
	endZone.Position = level.EndPoint
	endZone.Anchored = true
	endZone.BrickColor = BrickColor.new("Bright green")
	endZone.Transparency = 0.5
	endZone.CanCollide = false
	endZone.Parent = workspace

	local touchDetector = Instance.new("TouchTransmitter")
	touchDetector.Parent = endZone

	endZone.Touched:Connect(function(hit)
		local player = Players:GetPlayerFromCharacter(hit.Parent)
		if player and PlayerData[player.UserId] and PlayerData[player.UserId].CurrentLevel == i then
			HandleLevelCompletion(player)
		end
	end)
end

-- Create Lava Death Zones
for i, level in ipairs(LEVELS) do
	if level.Difficulty == 3 then -- Only for lava level
		local lavaZone = Instance.new("Part")
		lavaZone.Size = Vector3.new(80, 2, 80)
		lavaZone.Position = Vector3.new(level.SpawnPoint.X + 40, level.SpawnPoint.Y - 6, level.SpawnPoint.Z + 40)
		lavaZone.Anchored = true
		lavaZone.BrickColor = BrickColor.new("Bright red")
		lavaZone.Transparency = 0.3
		lavaZone.CanCollide = false
		lavaZone.Parent = workspace

		lavaZone.Touched:Connect(function(hit)
			local player = Players:GetPlayerFromCharacter(hit.Parent)
			if player then
				HandlePlayerDeath(player)
			end
		end)
	end
end

print("Obstacle Course Game Initialized!") 
