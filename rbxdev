-- DropperScript

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local SoundService = game:GetService("SoundService")

-- References to parts and folders
local DropTemplate = ReplicatedStorage:WaitForChild("Drop")
local Dropper = Workspace:WaitForChild("Dropper"):WaitForChild("Dropper")
local CashFolder = Workspace:WaitForChild("Cash")

-- Function to spawn a Drop part
local function spawnDrop()
	local newDrop = DropTemplate:Clone()
	-- Spawn at the specified CFrame position
	newDrop.Position = Vector3.new(25.416, 10.653, -31.9)
	newDrop.Parent = Workspace

	-- Ensure the Drop part can detect touches properly with physics
	if newDrop:IsA("BasePart") then
		newDrop.CanCollide = true -- Ensure it can collide for physics interaction
		newDrop.Anchored = false -- Ensure it falls due to gravity
	end

	-- Add a touch detection to the Drop part
	newDrop.Touched:Connect(function(hit)
		-- Check if the touched part is directly within the Cash folder or a descendant
		if hit and hit:IsDescendantOf(CashFolder) then
			-- Play sound when touched
			local sound = Instance.new("Sound")
			sound.SoundId = "rbxassetid://307631257"
			sound.Volume = 0.5 -- Adjust volume as needed (0 to 1)
			sound.Parent = SoundService
			sound:Play()
			sound.Ended:Connect(function()
				sound:Destroy() -- Clean up the sound instance after it finishes playing
			end)

			-- Find the player (assuming single player for simplicity)
			local player = game.Players:GetPlayers()[1] -- Modify this logic if needed for multiplayer
			if player then
				local leaderstats = player:FindFirstChild("leaderstats")
				if leaderstats then
					local money = leaderstats:FindFirstChild("Money")
					if money then
						local multiplier = 1
						local moneyMultiplier = player:FindFirstChild("MoneyMultiplier")
						if moneyMultiplier then
							multiplier = moneyMultiplier.Value
						end
						local rebirthMultiplier = player:FindFirstChild("RebirthMultiplier")
						if rebirthMultiplier then
							multiplier = multiplier * rebirthMultiplier.Value
						end
						local moneyToAdd = math.floor(10 * multiplier) -- Base 10 Money per drop, adjusted by multipliers
						money.Value = money.Value + moneyToAdd
						print("Added " .. moneyToAdd .. " Money to " .. player.Name .. " (Total Multiplier: " .. multiplier .. ")")
					end
				end
			end
			newDrop:Destroy() -- Destroy the Drop part only after confirmed touch with Cash part
		end
	end)

	-- Optional: Add a failsafe to destroy the Drop part if it falls out of the map or exists too long
	spawn(function()
		wait(10) -- Wait for 10 seconds to see if it touches something
		if newDrop and newDrop.Parent == Workspace then
			newDrop:Destroy() -- Destroy if it hasn't touched anything after 10 seconds
		end
	end)
end

-- Spawn drops periodically (adjust the wait time as needed)
while true do
	spawnDrop()
	wait(5) -- Spawn a new Drop every 5 seconds
end









-- Leaderboard

local Players = game:GetService("Players")

Players.PlayerAdded:Connect(function(player)
	local leaderstats = Instance.new("Folder")
	leaderstats.Name = "leaderstats"
	leaderstats.Parent = player

	local money = Instance.new("IntValue")
	money.Name = "Money"
	money.Value = 0
	money.Parent = leaderstats
end)








-- upgrades

local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

-- References to parts and folders
local UpgradeFolder = Workspace:WaitForChild("Upgrade")
local UpgradePart = UpgradeFolder:WaitForChild("Upgrade")

-- Upgrade settings
local basePrice = 50
local priceMultiplier = 1.5
local currentPrice = basePrice
local moneyMultiplier = 1 -- Starts at 1x, doubles each upgrade (2x, 4x, etc.)

-- Reference to BillboardGui and PriceText
local BillboardGui = UpgradePart:WaitForChild("Price")
local PriceText = BillboardGui:WaitForChild("PriceText")

-- Function to update the displayed price
local function updatePriceDisplay()
	PriceText.Text = "Upgrade Cost: " .. currentPrice .. " Money"
	PriceText.TextColor3 = Color3.new(1, 1, 1) -- White color for normal display
end

-- Initial price display
updatePriceDisplay()

-- Function to handle player touch on Upgrade part
UpgradePart.Touched:Connect(function(hit)
	local player = Players:GetPlayerFromCharacter(hit.Parent)
	if player then
		local leaderstats = player:FindFirstChild("leaderstats")
		if leaderstats then
			local money = leaderstats:FindFirstChild("Money")
			if money then
				if money.Value >= currentPrice then
					-- Player can afford the upgrade
					money.Value = money.Value - currentPrice
					moneyMultiplier = moneyMultiplier * 2
					currentPrice = math.floor(currentPrice * priceMultiplier)
					updatePriceDisplay()
					UpgradePart.BrickColor = BrickColor.new("Bright green") -- Visual feedback for success
					wait(1) -- Brief visual feedback
					UpgradePart.BrickColor = BrickColor.new("Bright green") -- Stay green after upgrade
					-- Optionally store moneyMultiplier on the player if needed for other scripts
					local multiplierValue = player:FindFirstChild("MoneyMultiplier")
					if not multiplierValue then
						multiplierValue = Instance.new("NumberValue")
						multiplierValue.Name = "MoneyMultiplier"
						multiplierValue.Parent = player
					end
					multiplierValue.Value = moneyMultiplier
				else
					-- Player cannot afford the upgrade
					PriceText.Text = "Can't Afford!"
					PriceText.TextColor3 = Color3.new(1, 0, 0) -- Red color for "Can't Afford"
					UpgradePart.BrickColor = BrickColor.new("Bright red")
					wait(1) -- Brief visual feedback
					UpgradePart.BrickColor = BrickColor.new("Bright green") -- Return to green after red
					updatePriceDisplay()
				end
			end
		end
	end
end)











-- Player Data Handler
local DataStoreService = game:GetService("DataStoreService")
local Players = game:GetService("Players")

-- Data store for player progress
local PlayerDataStore = DataStoreService:GetDataStore("TycoonProgress_V1")

-- Default player data structure
local defaultData = {
	Money = 0,
	DropperLevel = 1,
	DropperSpeed = 1,
	DropperValue = 1,
	Rebirths = 0
}

-- Table to store active player data
local playerData = {}

-- Function to load player data
function loadPlayerData(player)
	local userId = player.UserId
	local success, data = pcall(function()
		return PlayerDataStore:GetAsync(userId)
	end)

	if success and data then
		playerData[userId] = data
		print("Loaded data for " .. player.Name)
	else
		playerData[userId] = defaultData
		print("Created new data for " .. player.Name)
	end

	-- Set up leaderstats
	local leaderstats = Instance.new("Folder")
	leaderstats.Name = "leaderstats"
	leaderstats.Parent = player

	local money = Instance.new("IntValue")
	money.Name = "Money"
	money.Value = playerData[userId].Money
	money.Parent = leaderstats

	local rebirths = Instance.new("IntValue")
	rebirths.Name = "Rebirths"
	rebirths.Value = playerData[userId].Rebirths
	rebirths.Parent = leaderstats
end

-- Function to save player data
function savePlayerData(userId)
	if playerData[userId] then
		local success, err = pcall(function()
			PlayerDataStore:SetAsync(userId, playerData[userId])
		end)

		if success then
			print("Saved data for user " .. userId)
		else
			warn("Failed to save data for user " .. userId .. ": " .. tostring(err))
		end
	end
end

-- Function to update player data
function UpdatePlayerData(userId, key, value)
	if playerData[userId] then
		playerData[userId][key] = value
		-- Update leaderstats if applicable
		local player = Players:GetPlayerByUserId(userId)
		if player and player:FindFirstChild("leaderstats") then
			local stat = player.leaderstats:FindFirstChild(key)
			if stat then
				stat.Value = value
			end
		end
	end
end

-- Connect player events
Players.PlayerAdded:Connect(loadPlayerData)
Players.PlayerRemoving:Connect(function(player)
	savePlayerData(player.UserId)
	playerData[player.UserId] = nil
end)

-- Auto-save every 5 minutes
game:BindToClose(function()
	for userId in pairs(playerData) do
		savePlayerData(userId)
	end
end)

while true do
	wait(300) -- 5 minutes
	for userId in pairs(playerData) do
		savePlayerData(userId)
	end
	print("Auto-saved all player data")
end

-- Remote functions for client communication
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local DataRemotes = Instance.new("Folder")
DataRemotes.Name = "DataRemotes"
DataRemotes.Parent = ReplicatedStorage

local GetData = Instance.new("RemoteFunction")
GetData.Name = "GetData"
GetData.Parent = DataRemotes

local UpdateData = Instance.new("RemoteEvent")
UpdateData.Name = "UpdateData"
UpdateData.Parent = DataRemotes

function GetData.OnServerInvoke(player)
	return playerData[player.UserId]
end

UpdateData.OnServerEvent:Connect(function(player, key, value)
	UpdatePlayerData(player.UserId, key, value)
end) 
